@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Friends.Net.Components.Layout
@using Microsoft.AspNetCore.Identity
@using Friends.Net.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>👤 Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage/>

<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@username" id="username" class="form-control" placeholder="Choose your username." disabled/>
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PreferredName" id="Input.PreferredName" class="form-control" placeholder="Enter your Preferred Name"/>
                <label for="Input.PreferredName" class="form-label">Preferred Name</label>
                <ValidationMessage For="() => Input.PreferredName" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

<Email/>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? preferredName;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        MainLayout.Main?.SetPageTitle("Account");
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        preferredName = user.PreferredName;
        Input.PreferredName ??= preferredName;
    }

    private async Task OnValidSubmitAsync()
    {
        if (String.IsNullOrWhiteSpace(Input.PreferredName))
        {
            return;
        }
        user.PreferredName = Input.PreferredName.Trim() ?? user.PreferredName;
        await UserManager.UpdateAsync(user);
        await SignInManager.RefreshSignInAsync(user);

        if (user.Email == "admin@oli.fm")
        {
            await UserManager.AddToRoleAsync(user, "Admin");
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated, with the added Admin Role.", HttpContext);
        }
        else
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }
    }

    private sealed class InputModel
    {
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Preferred Name")]
        public string? PreferredName { get; set; }
    }
}