@using System.Collections.ObjectModel
@using System.Diagnostics
@using System.Reflection
@using Mono.TextTemplating

<div style="max-width: 100%; overflow-x: scroll;">
    <table style="width: 100%;">
        <caption>
            @Caption
        </caption>
        <thead>
        <tr>
            @foreach(var property in _properties)
            {
                <th scope="col">
                    <p>@property.Name</p>
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @if (Items != null)
        {
            foreach (var item in Items)
            {
                <tr>
                    @foreach (var property in _properties)
                    {
                        <td>
                            @{
                                string value = property.GetValue(item)?.ToString() ?? string.Empty;
                            }
                            <input type="text"
                                   class="form-control input"
                                   value="@value"
                                   placeholder="@property.Name"/>
                        </td>
                    }
                </tr>
            }
        }
        </tbody>
        <tfoot>
        <tr>
            <th scope="row" colspan="@(_properties.Length-1)">
                <p>Total</p>
            </th>
            @if (Items != null)
            {
                <td>@Items.Count()</td>
            }
            else
            {
                <td>0</td>
            }
        </tr>
        </tfoot>
    </table>
</div>

@code {
    [Parameter] public Type? ItemType { get; set; }
    [Parameter] public IEnumerable<object>? Items { get; set; } = [];
    [Parameter] public  IEnumerable<string>? PropertyFilter { get; set; }
    [Parameter] public string Caption { get; set; } = string.Empty;
    [Parameter] public bool ShowGridControls { get; set; } = true;
    [Parameter] public bool ShowCaption { get; set; } = true;

    private PropertyInfo[] _properties = Array.Empty<PropertyInfo>();

    protected override void OnInitialized()
    {
        if (ItemType != null)
        {
            if(PropertyFilter != null && PropertyFilter.Any())
            {
                List<PropertyInfo> properties = new();
                foreach (var property in  ItemType.GetProperties())
                {
                    if (PropertyFilter.Contains(property.Name))
                    {
                        properties.Add(property);
                    }
                }
                _properties = properties.ToArray();
            }
        }

        AddEmpty();
        base.OnInitialized();
    }
    
    private void TextChange(string searchFor)
    {
        searchFor ??= string.Empty;
        Trace.WriteLine(searchFor);
    }

    private void AddEmpty()
    {
        Items ??= [];
        if (ItemType != null && Items is not null)
        {
            try
            {
                // Create a new instance of the type specified by ItemType
                var newItem = Activator.CreateInstance(ItemType);
                if (newItem != null)
                {
                    // Ensure Items is mutable
                    if (Items is List<object> itemList)
                    {
                        itemList.Add(newItem);
                    }
                    else
                    {
                        // Convert to a list, add the new item, and reassign
                        var updatedItems = Items.ToList();
                        updatedItems.Add(newItem);
                        Items = updatedItems;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding empty item: {ex.Message}");
            }
        }
        StateHasChanged();
    }
}
