@page "/Settings/UsersGroups"

@using static MudBlazor.CategoryTypes
@using Friends.Net.Services.LDAP
@using System.Net.Http.Json
@using Friends.Net.Data
@using Friends.Net.Services.LDAP.Models
@using BlazorBootstrap;
@using Friends.Net.Components.Webpart;
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject LdapManager LdapManager
@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer

<div style="display: ruby-base;">
    @{
        var href = _items.First().Href ?? "/Settings";
    }
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" OnClick="(() => Navigation.NavigateTo(href))" />
    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
</div>

<div>
    <MudTabs Outlined="true" MinimumTabWidth="20px">
        @foreach (SettingsGroup group in GetSettingsGroups())
        {
            Type type = group.CollectionType;
            var ldapUser = new LdapUserDto();
            if (mudUserTable?.SelectedItems?.Count() > 1)
            {
                LdapUserDto? check = (LdapUserDto)mudUserTable?.SelectedItems?.First();
                if (check is LdapUserDto usr)
                {
                    ldapUser = usr;
                }
            }
            var ldapGroup = new LdapGroupDto();
            if (mudGroupTable?.SelectedItems?.Count() > 1)
            {
                LdapGroupDto? check = (LdapGroupDto)mudUserTable?.SelectedItems?.First();
                if (check is LdapGroupDto grp)
                {
                    ldapGroup = grp;
                }
            }
            <MudTabPanel Text="@group.Name" Icon="@group.Icon">
                <MudPaper Square="true" Class="d-flex">
                    @{
                        int check = 1;
                        foreach (var tool in group.Tools)
                        {
                            if (tool.Section != check)
                            {
                                check = tool.Section;
                                <MudDivider Vertical="true" FlexItem="true" />
                            }
                            if (string.IsNullOrWhiteSpace(tool.Label))
                            {
                                <MudIconButton Icon="@tool.Icon" Color="Color.Dark" Class="rounded-0" OnClick="() => tool.OnClick?.Invoke(this, EventArgs.Empty)"/>
                            }
                            else{
                                <MudButton StartIcon="@tool.Icon" Color="Color.Dark" Class="rounded-0" OnClick="() => tool.OnClick?.Invoke(this, EventArgs.Empty)">
                                    @tool.Label
                                </MudButton>
                            }
                        }
                    }
                </MudPaper>

                <MudTable T="LdapObject" Items="group.Collection" Hover="true" @onclick=CheckUsersTable Breakpoint="Breakpoint.Sm" @ref="group.Table" Loading="@_loading" SelectedItemChanged="(obj) => OnSelectedItemChanged(obj)" RowClass="cursor-pointer" MultiSelection="false">
                    <HeaderContent>
                        @{

                            if (type == typeof(LdapUserDto))
                            {
                                <MudTh></MudTh>
                                <MudTh>Email</MudTh>
                                <MudTh>User ID</MudTh>
                                <MudTh>Display Name</MudTh>
                                <MudTh>Enabled</MudTh>
                                <MudTh>Ldap User</MudTh>
                            }
                            else if (type == typeof(LdapGroupDto))
                            {
                                <MudTh></MudTh>
                                <MudTh>Cn</MudTh>
                                <MudTh>Description</MudTh>
                                <MudTh>Members</MudTh>
                            }
                        }
                    </HeaderContent>
                    <RowTemplate >
                        @{
                            var item = context as LdapObject;
                            if (item is LdapUserDto user)
                            {
                                bool isSelected = item == _selectedUser;
                                <MudTd DataLabel="Email">
                                    <MudCheckBox T="bool"
                                                 ReadOnly="true"
                                                 Value="isSelected"></MudCheckBox>
                                </MudTd>
                                <MudTd DataLabel="Email">@user.Email</MudTd>
                                <MudTd DataLabel="User ID">@user.Uid</MudTd>
                                <MudTd DataLabel="Display Name">@user.DisplayName</MudTd>
                                <MudTd DataLabel="Enabled">
                                    @if (user.IsEnable)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Close"></MudIcon>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Is LDAP User">
                                    @if (user.IsLdapObject)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Close"></MudIcon>
                                    }
                                </MudTd>
                            }
                            @if (context is LdapGroupDto group)
                            {
                                bool isSelected = item == _selectedGroup;
                                <MudTd DataLabel="Email">
                                    <MudCheckBox T="bool"
                                                 ReadOnly="true"
                                                 Value="isSelected"></MudCheckBox>
                                </MudTd>
                                <MudTd DataLabel="Cn">@group.Cn</MudTd>
                                <MudTd DataLabel="Description">@group.Description</MudTd>
                                <MudTd DataLabel="Members">@group.Members.Count()</MudTd>
                            }
                        }
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
        }
    </MudTabs>
</div>

@{
    object ToSave = "";
    string modId = "";
    <Modal @ref="_usersGroupsModal" title="@ModalTitle" IsVerticallyCentered="true">
        <BodyTemplate>
            @{
                switch (_modalState)
                {
                    case ModalState.UsersAdd:
                        ToSave = new LdapUserDto();
                        userDict["IsLdapUser"].ReadOnly = false;
                        userDict["Uid"].ReadOnly = false;
                        <AutoMudForm Object="ToSave"
                        ObjectFormMapping="userDict" />
                        return;
                    case ModalState.UserDelete:
                        var usrDelTxt = GetSettingsGroups()[0].Table.SelectedItems?.Count > 1 ? "multiple users" : _selectedUser.Uid;
                        ToSave = _selectedUser;
                        <AutoMudForm Object="ToSave"
                        Name="@usrDelTxt"
                        Function="AutoMudForm.FormFunction.Delete"
                        ObjectFormMapping="userDict" />
                        return;
                    case ModalState.UsersEdit:
                        userDict["IsLdapUser"].ReadOnly = true;
                        userDict["Uid"].ReadOnly = true;
                        ToSave = _selectedUser ?? new();
                        modId = _selectedUser?.Uid ?? "";
                        <AutoMudForm Object="ToSave"
                        ObjectFormMapping="userDict" />
                        return;
                    case ModalState.GroupsAdd:
                        ToSave = new LdapGroupDto();
                        <AutoMudForm Object="ToSave"
                        ObjectFormMapping="userDict" />
                        return;
                    case ModalState.GroupsDelete:
                        var groupDelTxt = _selectedGroup.Uid;
                        ToSave = _selectedGroup;
                        <AutoMudForm Object="ToSave"
                        Name="@groupDelTxt"
                        Function="AutoMudForm.FormFunction.Delete"
                        ObjectFormMapping="userDict" />
                        return;
                    case ModalState.GroupsEdit:
                        ToSave = _selectedGroup ?? new();
                        modId = _selectedGroup?.Uid ?? "";
                        <AutoMudForm Object="ToSave"
                        ObjectFormMapping="userDict" />
                        return;
                }
            }
        </BodyTemplate>
        <FooterTemplate>
            <MudButton Color="Color.Secondary" OnClick="() => _usersGroupsModal.HideAsync()">Cancel</MudButton>
            @{
                switch (_modalState)
                {
                    case ModalState.UsersAdd:
                        <MudButton Color="Color.Primary" OnClick="() => CreateObject(ToSave)">Create</MudButton>
                        return;
                    case ModalState.UserDelete:
                        <MudButton Color="Color.Primary" OnClick="() => DeleteObject(ToSave)">Delete</MudButton>
                        return;
                    case ModalState.UsersEdit:
                        <MudButton Color="Color.Primary" OnClick="() => SaveObject(modId, ToSave)">Save</MudButton>
                        return;
                    case ModalState.GroupsAdd:
                        <MudButton Color="Color.Primary" OnClick="() => CreateObject(ToSave)">Create</MudButton>
                        return;
                    case ModalState.GroupsDelete:
                        <MudButton Color="Color.Primary" OnClick="() => DeleteObject(ToSave)">Delete</MudButton>
                        return;
                    case ModalState.GroupsEdit:
                        <MudButton Color="Color.Primary" OnClick="() => SaveObject(modId, ToSave)">Save</MudButton>
                        return;
                }
            }
        </FooterTemplate>
    </Modal>
}

@code {
    private bool _loading = true;
    private List<MudBlazor.BreadcrumbItem> _items =
    [
        new("Settings", href: "/Settings"),
    new("Users and Groups", href: null, disabled: true),
    ];

    private string _userSearchString = string.Empty;
    private string _groupSearchString = string.Empty;

    private LdapUserDto _selectedUser = null;
    private LdapGroupDto _selectedGroup = null;

    private List<LdapUserDto> Users = new List<LdapUserDto>();
    private List<LdapGroupDto> Groups = new List<LdapGroupDto>();

    private MudTable<LdapObject> mudUserTable = new();
    private MudTable<LdapObject> mudGroupTable = new();

    private Dictionary<string, AutoMudForm.FormData> userDict = new Dictionary<string, AutoMudForm.FormData>
            {
                { "Uid", new AutoMudForm.FormData("Uid", "User ID", true, false, true) },
                { "GivenName", new AutoMudForm.FormData("GivenName", "First Name", true) },
                { "Sn", new AutoMudForm.FormData("Sn", "Last Name", true) },
                { "Cn", new AutoMudForm.FormData("Cn", "Common Name", false, true) },
                { "DisplayName", new AutoMudForm.FormData("DisplayName", "Display Name", true) },
                { "Password", new AutoMudForm.FormData("Password", "Password", false, true) },
                { "Email", new AutoMudForm.FormData("Email", "Email Address", true) },
                { "TelephoneNumber", new AutoMudForm.FormData("TelephoneNumber", "Phone Number", false) },
                { "IsLdapUser", new AutoMudForm.FormData("IsLdapUser", "LDAP User", false, false, true) },
                { "IsEnable", new AutoMudForm.FormData("IsEnable", "Enabled", false) }
            };

    public enum ModalState
    {
        UsersAdd,
        UserDelete,
        UsersEdit,
        GroupsAdd,
        GroupsDelete,
        GroupsEdit
    }
    private string ModalTitle = "";
    private ModalState _modalState;
    private Modal _usersGroupsModal = default!;

    private List<SettingsGroup> GetSettingsGroups()
    {
        List<SettingsGroup> settingsGroups = new List<SettingsGroup>
        {
            new SettingsGroup
            {
                Name = "Users",
                Icon = Icons.Material.Filled.Person,
                Tools = new SettingsGroupTool[]
                {
                    new SettingsGroupTool("Refresh", "", 1, Icons.Material.Filled.Refresh, (sender, args) => LoadData()),
                    new SettingsGroupTool("Delete", "", 2, Icons.Material.Filled.Delete, (sender, args) => ShowModal(ModalState.UserDelete)),
                    new SettingsGroupTool("Add User", "Add User", 3, Icons.Material.Filled.PersonAdd, (sender, args) => ShowModal(ModalState.UsersAdd)),
                    new SettingsGroupTool("Edit User", "Edit User", 3, Icons.Material.Filled.Edit, (sender, args) => ShowModal(ModalState.UsersEdit)),
                    new SettingsGroupTool("Disable", "Disable", 4, Icons.Material.Filled.PersonOff, (sender, args) => DisableSelected(true)),
                    new SettingsGroupTool("Enable", "Enable", 4, Icons.Material.Filled.Check, (sender, args) => DisableSelected(false))
                },
                Table = mudUserTable,
                CollectionType = typeof(LdapUserDto),
                Collection = Users.ToArray()
            },
            new SettingsGroup
            {
                Name = "Groups",
                Icon = Icons.Material.Filled.Group,
                Tools = new SettingsGroupTool[]
                {
                    new SettingsGroupTool("Refresh", "", 1, Icons.Material.Filled.Refresh, (sender, args) => LoadData()),
                    new SettingsGroupTool("Delete", "", 2, Icons.Material.Filled.Delete, (sender, args) => ShowModal(ModalState.GroupsDelete)),
                    new SettingsGroupTool("Add Group", "Add Group", 3, Icons.Material.Filled.GroupAdd, (sender, args) => ShowModal(ModalState.GroupsAdd)),
                    new SettingsGroupTool("Edit Group", "Edit Group", 3, Icons.Material.Filled.Edit, (sender, args) => ShowModal(ModalState.GroupsEdit))
                },
                CollectionType = typeof(LdapGroupDto),
                Collection = Groups.ToArray()
            }
        };
        return settingsGroups;
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        LoadData();
    }

    private async void LoadData()
    {
        Users = DbContext.Users.Select(u => u.ToLdap()).ToList();
        var ldapUsers = await LdapManager.Users.GetAll();
        foreach (LdapUserDto user in ldapUsers)
        {
            var dbUser = Users.FirstOrDefault(dbuser => user.Email == dbuser.Email);
            if (dbUser != null)
            {   // Update the existing user with the LDAP user details
                dbUser.Uid = user.Uid;
                dbUser.GivenName = user.GivenName;
                dbUser.Cn = user.Cn;
                dbUser.DisplayName = user.DisplayName;
                dbUser.Password = user.Password;
                dbUser.Email = user.Email;
                dbUser.IsLdapObject = true;
            }
            else
            {
                Users.Add(user);
            }
        }
        var ldapGroups = await LdapManager.Group.GetAll();
        Groups = ldapGroups.ToList();
        _loading = false;
        StateHasChanged();
    }

    private async void ShowModal(ModalState state)
    {
        _modalState = state;
        switch (_modalState)
        {
            case ModalState.UsersAdd:
                ModalTitle = "Add User";
                break;
            case ModalState.UserDelete:
                ModalTitle = "Delete User";
                break;
            case ModalState.UsersEdit:
                ModalTitle = "Edit User";
                break;
            case ModalState.GroupsAdd:
                ModalTitle = "Add Group";
                break;
            case ModalState.GroupsDelete:
                ModalTitle = "Delete Group";
                break;
            case ModalState.GroupsEdit:
                ModalTitle = "Edit Group";
                break;
        }
        await _usersGroupsModal.ShowAsync();
    }

    private bool FilterFunc1(LdapUserDto element) => FilterFunc(element, _userSearchString);

    private bool FilterFunc(LdapUserDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.DisplayName} {element.GivenName} {element.Email}".Contains(searchString))
            return true;
        return false;
    }

    private void CheckUsersTable()
    {
        // _noUsersSelected = mudUserTable.SelectedItems?.Count == 0;
    }

    private async void CreateObject(object Object)
    {

    }

    private async void DeleteObject(object Object)
    {
        if (Object is LdapUserDto ldapUser)
        {
            var dbObj = DbContext.Users.FirstOrDefault(u => u.Email == ldapUser.Email);
            if (dbObj == null)
            {
                return;
            }
            await UserManager.DeleteAsync(dbObj);
            if (dbObj.ConnectedToLdap)
            {
                var result = await LdapManager.Users.Delete(ldapUser);
                if (result)
                {
                    Users.Remove(ldapUser);
                }
            }
        }
        await _usersGroupsModal.HideAsync();
    }

    private async void SaveObject(string uid, object Object)
    {
        if (Object is LdapUserDto ldapUser)
        {
            var result = await LdapManager.Users.Update(uid, ldapUser);
        }
        await _usersGroupsModal.HideAsync();
    }

    private void DisableSelected(bool forReal)
    {
        // if (mudUserTable.SelectedItems == null)
        // {
        //     return;
        // }
        // foreach (var user in mudUserTable.SelectedItems)
        // {
        //     ToggleUserState(user.Uid, false);
        // }
        foreach (var group in mudGroupTable.SelectedItems)
        {
            // ToggleUserState(user.Uid, false);
        }
    }

    private void OnSelectedItemChanged(LdapObject selectedItems)
    {
        if (selectedItems is LdapUserDto user)
        {
            _selectedUser = user;
        }
        else if (selectedItems is LdapGroupDto group)
        {
            _selectedGroup = group;
        }
    }

    private async void ToggleUserState(string uid, bool state)
    {
        LdapUserDto? result = await LdapManager.Users.Get(uid);
        if (result == null)
        {
            return;
        }
        result.IsEnable = state;
        await LdapManager.Users.Update(uid, result);
    }

    private LdapUserDto GetSelectedUser()
    {
        LdapUserDto user = new();
        if (mudUserTable?.SelectedItems == null)
        {
            return user;
        }
        else if (mudUserTable?.SelectedItems?.Count() > 1)
        { 
            var check = mudUserTable?.SelectedItems?.First();
            if (check is LdapUserDto usr)
            {
                user = usr;
            }
        }
        return user;
    }

    private class SettingsGroup
    {
        public string Name { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public SettingsGroupTool[] Tools { get; set; } = [];
        public Type CollectionType { get; set; } = typeof(string);
        public LdapObject[] Collection { get; set; } = [];
        public MudTable<LdapObject>? Table { get; set; }
    }

    private class SettingsGroupTool(string tooltip, string label, int section, string icon, EventHandler onClick)
    {
        public string Tooltip { get; set; } = tooltip;
        public string Label { get; set; } = label;
        public string Icon { get; set; } = icon;
        public int Section { get; set; } = section;
        public EventHandler? OnClick { get; set; } = onClick;
    }
}